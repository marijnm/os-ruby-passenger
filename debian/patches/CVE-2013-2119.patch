Description: Fix for CVE-2013-2119: insecure tmp files usage
Origin: upstream, https://github.com/phusion/passenger/commit/0eaebb00f6b7327374069a7998064c68cc54e9f1
 and https://github.com/phusion/passenger/commit/56d9d39fb522e0967acbde0bcec1afc37313ceb4
Bug-Debian: http://bugs.debian.org/710351

--- a/bin/passenger-install-nginx-module
+++ b/bin/passenger-install-nginx-module
@@ -27,6 +27,7 @@ $LOAD_PATH.unshift("#{passenger_root}/lib")
 require 'phusion_passenger'
 require 'optparse'
 require 'fileutils'
+require 'tmpdir'
 require 'phusion_passenger/platform_info/ruby'
 require 'phusion_passenger/dependencies'
 require 'phusion_passenger/abstract_installer'
@@ -108,14 +109,12 @@ class Installer < PhusionPassenger::AbstractInstaller
 	def before_install
 		super
 		myself = `whoami`.strip
-		@working_dir = "/tmp/#{myself}-passenger-#{Process.pid}"
-		FileUtils.rm_rf(@working_dir)
-		FileUtils.mkdir_p(@working_dir)
+		@working_dir = Dir.mktmpdir("passenger.")
 	end
 	
 	def after_install
 		super
-		FileUtils.rm_rf(@working_dir)
+		FileUtils.remove_entry_secure(@working_dir) if @working_dir
 	end
 
 private
--- a/lib/phusion_passenger/dependencies.rb
+++ b/lib/phusion_passenger/dependencies.rb
@@ -22,6 +22,7 @@
 #  THE SOFTWARE.
 
 require 'rbconfig'
+require 'tmpdir'
 require 'phusion_passenger'
 require 'phusion_passenger/packaging'
 require 'phusion_passenger/platform_info'
@@ -117,6 +118,12 @@ def self.mizuho_required?
 		end
 	end
 
+	def self.create_temp_files(name1, name2, dir = PlatformInfo.tmpexedir)
+		Dir.mktmpdir("passenger.", dir) do |subdir|
+			yield "#{subdir}/#{name1}", "#{subdir}/#{name2}"
+		end
+	end
+
 	GCC = Dependency.new do |dep|
 		dep.name = "GNU C++ compiler"
 		dep.define_checker do |result|
@@ -456,9 +463,7 @@ def self.mizuho_required?
 	Curl_Dev = Dependency.new do |dep|
 		dep.name = "Curl development headers with SSL support"
 		dep.define_checker do |result|
-			source_file = "#{PlatformInfo.tmpexedir}/passenger-curl-check.c"
-			output_file = "#{PlatformInfo.tmpexedir}/passenger-curl-check"
-			begin
+			Dependencies.create_temp_files("check.c", "check") do |source_file, output_file|
 				found = true
 				File.open(source_file, 'w') do |f|
 					f.puts("#include <curl/curl.h>")
@@ -482,9 +487,6 @@ def self.mizuho_required?
 					found = false
 				end
 				result.found(found)
-			ensure
-				File.unlink(source_file) rescue nil
-				File.unlink(output_file) rescue nil
 			end
 		end
 		dep.install_instructions = "Please download Curl from <b>http://curl.haxx.se/libcurl</b> " +
@@ -514,22 +516,17 @@ def self.mizuho_required?
 	OpenSSL_Dev = Dependency.new do |dep|
 		dep.name = "OpenSSL development headers"
 		dep.define_checker do |result|
-			source_file = "#{PlatformInfo.tmpexedir}/passenger-openssl-check.c"
-			object_file = "#{PlatformInfo.tmpexedir}/passenger-openssl-check.o"
-			begin
+			Dependencies.create_temp_files("check.c", "check.o") do |source_file, output_file|
 				File.open(source_file, 'w') do |f|
 					f.write("#include <openssl/ssl.h>")
 				end
 				Dir.chdir(File.dirname(source_file)) do
-					if system("(gcc #{ENV['CFLAGS']} -c '#{source_file}') >/dev/null 2>/dev/null")
+					if system("(gcc #{ENV['CFLAGS']} -c '#{source_file}' -o '#{output_file}') >/dev/null 2>/dev/null")
 						result.found
 					else
 						result.not_found
 					end
 				end
-			ensure
-				File.unlink(source_file) rescue nil
-				File.unlink(object_file) rescue nil
 			end
 		end
 		if RUBY_PLATFORM =~ /linux/
@@ -546,22 +543,17 @@ def self.mizuho_required?
 	Zlib_Dev = Dependency.new do |dep|
 		dep.name = "Zlib development headers"
 		dep.define_checker do |result|
-			source_file = "#{PlatformInfo.tmpexedir}/zlib-check.c"
-			object_file = "#{PlatformInfo.tmpexedir}/zlib-check.o"
-			begin
+			Dependencies.create_temp_files("check.c", "check.o") do |source_file, output_file|
 				File.open(source_file, 'w') do |f|
 					f.write("#include <zlib.h>")
 				end
 				Dir.chdir(File.dirname(source_file)) do
-					if system("(g++ -c zlib-check.c) >/dev/null 2>/dev/null")
+					if system("(g++ -c '#{source_file}' -o '#{output_file}') >/dev/null 2>/dev/null")
 						result.found
 					else
 						result.not_found
 					end
 				end
-			ensure
-				File.unlink(source_file) rescue nil
-				File.unlink(object_file) rescue nil
 			end
 		end
 		if RUBY_PLATFORM =~ /linux/
--- a/lib/phusion_passenger/standalone/command.rb
+++ b/lib/phusion_passenger/standalone/command.rb
@@ -172,8 +172,11 @@ def determine_various_resource_locations(create_subdirs = true)
 	
 	def write_nginx_config_file
 		require 'phusion_passenger/platform_info/ruby'
-		ensure_directory_exists(@temp_dir)
-		
+		require 'tmpdir'
+		@temp_dir        = Dir.mktmpdir("passenger.", "/tmp")
+		@config_filename = "#{@temp_dir}/config"
+		File.chmod(0755, @temp_dir)
+
 		File.open(@config_filename, 'w') do |f|
 			f.chmod(0644)
 			template_filename = File.join(TEMPLATES_DIR, "standalone", "config.erb")
@@ -213,8 +216,6 @@ def nginx_ping_port
 	def create_nginx_controller(extra_options = {})
 		require_daemon_controller
 		require 'socket' unless defined?(UNIXSocket)
-		@temp_dir        = "/tmp/passenger-standalone.#{$$}"
-		@config_filename = "#{@temp_dir}/config"
 		if @options[:socket_file]
 			ping_spec = [:unix, @options[:socket_file]]
 		else
--- a/lib/phusion_passenger/standalone/runtime_installer.rb
+++ b/lib/phusion_passenger/standalone/runtime_installer.rb
@@ -23,6 +23,7 @@
 #  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 #  THE SOFTWARE.
 require 'fileutils'
+require 'tmpdir'
 require 'phusion_passenger'
 require 'phusion_passenger/abstract_installer'
 require 'phusion_passenger/packaging'
@@ -164,16 +165,14 @@ def install!
 	def before_install
 		super
 		@plugin.call_hook(:runtime_installer_start, self) if @plugin
-		@working_dir = "/tmp/#{myself}-passenger-standalone-#{Process.pid}"
-		FileUtils.rm_rf(@working_dir)
-		FileUtils.mkdir_p(@working_dir)
+		@working_dir = Dir.mktmpdir("passenger.")
 		@download_binaries = true if !defined?(@download_binaries)
 		@binaries_url_root ||= STANDALONE_BINARIES_URL_ROOT
 	end
 
 	def after_install
 		super
-		FileUtils.rm_rf(@working_dir)
+		FileUtils.remove_entry_secure(@working_dir) if @working_dir
 		@plugin.call_hook(:runtime_installer_cleanup) if @plugin
 	end
 
--- a/lib/phusion_passenger/platform_info.rb
+++ b/lib/phusion_passenger/platform_info.rb
@@ -21,6 +21,8 @@
 #  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 #  THE SOFTWARE.
 
+require 'tmpdir'
+
 module PhusionPassenger
 
 # This module autodetects various platform-specific information, and
@@ -263,15 +265,12 @@ def self.try_compile(language, source, flags = nil)
 		else
 			raise ArgumentError,"Unsupported language '#{language}'"
 		end
-		filename = File.join("#{tmpexedir}/passenger-compile-check-#{Process.pid}.c")
-		File.open(filename, "w") do |f|
-			f.puts(source)
-		end
-		begin
+		Dir.mktmpdir("passenger.", tmpexedir) do |dir|
+			filename = File.join(dir, "check.c")
+			File.open(filename, "w") do |f|
+				f.puts(source)
+			end
 			return system("(#{compiler} #{flags} -c '#{filename}' -o '#{filename}.o') >/dev/null 2>/dev/null")
-		ensure
-			File.unlink(filename) rescue nil
-			File.unlink("#{filename}.o") rescue nil
 		end
 	end
 	private_class_method :try_compile
@@ -284,15 +283,12 @@ def self.try_link(language, source, flags = nil)
 		else
 			raise ArgumentError,"Unsupported language '#{language}'"
 		end
-		filename = File.join("#{tmpexedir}/passenger-link-check-#{Process.pid}.c")
-		File.open(filename, "w") do |f|
-			f.puts(source)
-		end
-		begin
+		Dir.mktmpdir("passenger.", tmpexedir) do |dir|
+			filename = File.join(dir, "check.c")
+			File.open(filename, "w") do |f|
+				f.puts(source)
+			end
 			return system("(#{compiler} #{flags} '#{filename}' -o '#{filename}.out') >/dev/null 2>/dev/null")
-		ensure
-			File.unlink(filename) rescue nil
-			File.unlink("#{filename}.out") rescue nil
 		end
 	end
 	private_class_method :try_link
@@ -305,17 +301,16 @@ def self.try_compile_and_run(language, source, flags = nil)
 		else
 			raise ArgumentError,"Unsupported language '#{language}'"
 		end
-		filename = File.join("#{tmpexedir}/passenger-compile-check-#{Process.pid}.c")
-		File.open(filename, "w") do |f|
-			f.puts(source)
-		end
-		begin
+		Dir.mktmpdir("passenger.", tmpexedir) do |dir|
+			filename = File.join(dir, "check.c")
+			File.open(filename, "w") do |f|
+				f.puts(source)
+			end
 			if system("(#{compiler} #{flags} '#{filename}' -o '#{filename}.out') >/dev/null 2>/dev/null")
 				if Process.respond_to?(:spawn)
 					pid = Process.spawn("#{filename}.out",
 						:out => ["/dev/null", "w"],
 						:err => ["/dev/null", "w"])
-					
 				else
 					pid = fork do
 						STDOUT.reopen("/dev/null", "w")
@@ -328,9 +323,6 @@ def self.try_compile_and_run(language, source, flags = nil)
 			else
 				return false
 			end
-		ensure
-			File.unlink(filename) rescue nil
-			File.unlink("#{filename}.out") rescue nil
 		end
 	end
 	private_class_method :try_compile_and_run
--- a/lib/phusion_passenger/platform_info/apache.rb
+++ b/lib/phusion_passenger/platform_info/apache.rb
@@ -285,16 +285,7 @@ def self.apu_libs
 	# headers are placed into the same directory as the Apache headers,
 	# and so 'apr-config' and 'apu-config' won't be necessary in that case.
 	def self.apr_config_needed_for_building_apache_modules?
-		filename = File.join("#{tmpexedir}/passenger-platform-check-#{Process.pid}.c")
-		File.open(filename, "w") do |f|
-			f.puts("#include <apr.h>")
-		end
-		begin
-			return !system("(gcc #{apache2_module_cflags(false)} -c '#{filename}' -o '#{filename}.o') >/dev/null 2>/dev/null")
-		ensure
-			File.unlink(filename) rescue nil
-			File.unlink("#{filename}.o") rescue nil
-		end
+		return !try_compile(:c, "#include <apr.h>", apache2_module_cflags(false))
 	end
 	memoize :apr_config_needed_for_building_apache_modules?
 
